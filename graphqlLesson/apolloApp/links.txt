https://www.apollographql.com/docs/tutorial/introduction/
https://www.youtube.com/watch?v=LIaekiT6Ehs comparison rest graphql grpc
https://www.youtube.com/watch?v=yLf0rIaRtRc graphql vs rest
https://nordicapis.com/when-to-use-what-rest-graphql-webhooks-grpc/
https://www.youtube.com/watch?v=783ccP__No8 graphql story
https://medium.com/open-graphql/exploring-different-graphql-clients-d1bc69de305f graphql clients
https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png - cheat sheet for graphql
https://medium.com/@galen.corey/understanding-apollo-fetch-policies-705b5ad71980 - fetch policies
https://www.youtube.com/watch?v=7wzR4Ig5pTI tutorial for graphql with spacex api
https://www.apollographql.com/docs/apollo-server/api/apollo-server/ - constructor appolo client
https://medium.com/the-graphqlhub/graphql-tour-interfaces-and-unions-7dd5be35de0d difference between union and interface
https://www.apollographql.com/docs/apollo-server/data/resolvers/ resolvers explanation



Resolvers in GraphQL can return different kinds of results which are treated differently:

null or undefined - this indicates the object could not be found. If your schema says that field is nullable, then the result will have a null value at that position. If the field is non-null, the result will "bubble up" to the nearest nullable field and that result will be set to null. This is to ensure that the API consumer never gets a null value when they were expecting a result.
An array - this is only valid if the schema indicates that the result of a field should be a list. The sub-selection of the query will run once for every item in this array.
A promise - resolvers often do asynchronous actions like fetching from a database or backend API, so they can return promises. This can be combined with arrays, so a resolver can return:

A promise that resolves an array
An array of promises
A scalar or object value - a resolver can also return any other kind of value, which doesn't have any special meaning but is simply passed down into any nested resolvers, as described in the next section.